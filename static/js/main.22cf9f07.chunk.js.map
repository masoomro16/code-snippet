{"version":3,"sources":["Input.js","Code.js","PreviewBox.js","App.js","index.js"],"names":["Input","Code","props","codeInput","useRef","readOnly","ref","onClick","current","select","value","code","background","PreviewBox","useState","angle","colors","MozBackground","WebkitBackground","gradientStyle","setGradientStyle","useEffect","prev","newStr","slice","reduce","final","acc","className","style","width","height","App","setColors","setAngle","inputs","map","color","index","type","onChange","e","id","prevColors","changeColor","target","name","ReactDOM","render","document","getElementById"],"mappings":"4NAceA,I,OCMAC,MAlBf,SAAcC,GAEV,IAAMC,EAAYC,iBAAO,MAMzB,OACI,0BACIC,UAAQ,EACRC,IAAKH,EACLI,QARc,WAClBJ,EAAUK,QAAQC,UAQdC,MAAK,sBAAiBR,EAAMS,KAAKC,WAA5B,gCAA8DV,EAAMS,KAAKC,WAAzE,wBAAmGV,EAAMS,KAAKC,eCoBhHC,MAhCf,SAAoBX,GAEhB,MAA0CY,mBAAS,CAC/CF,WAAW,mBAAD,OAAqBV,EAAMa,MAA3B,gBAAwCb,EAAMc,OAAO,GAArD,aAA4Dd,EAAMc,OAAO,GAAzE,KACVC,cAAc,mBAAD,OAAqBf,EAAMa,MAA3B,gBAAwCb,EAAMc,OAAO,GAArD,aAA4Dd,EAAMc,OAAO,GAAzE,KACbE,iBAAiB,mBAAD,OAAqBhB,EAAMa,MAA3B,gBAAwCb,EAAMc,OAAO,GAArD,aAA4Dd,EAAMc,OAAO,GAAzE,OAHpB,mBAAOG,EAAP,KAAsBC,EAAtB,KAoBA,OAdAC,qBAAU,WACND,GAAiB,SAAAE,GACb,IAAIC,EAASrB,EAAMc,OAAOQ,MAAM,GAAGC,QAAO,SAACC,EAAMC,GAC7C,MAAM,GAAN,OAAUD,EAAV,aAAoBC,KADX,UAEPzB,EAAMc,OAAO,GAFN,MAIb,MAAO,CACHJ,WAAW,mBAAD,OAAqBV,EAAMa,MAA3B,gBAAwCQ,EAAxC,KACVN,cAAc,mBAAD,OAAqBf,EAAMa,MAA3B,gBAAwCQ,EAAxC,KACbL,iBAAiB,mBAAD,OAAqBhB,EAAMa,MAA3B,gBAAwCQ,EAAxC,WAGzB,CAACrB,EAAMc,OAAQd,EAAMa,QAGpB,sBAAKa,UAAU,cAAf,UACI,qBAAKC,MAAK,2BAAMV,GAAN,IAAsBW,MAAO,QAASC,OAAQ,YAExD,cAAC,EAAD,CAAMpB,KAAMQ,Q,MCkBTa,MA1Cf,SAAa9B,GACX,MAA4BY,mBAAS,CAAC,UAAW,YAAjD,mBAAOE,EAAP,KAAeiB,EAAf,KACA,EAA0BnB,mBAAS,IAAnC,mBAAOC,EAAP,KAAcmB,EAAd,KAcMC,EAASnB,EAAOoB,KAAI,SAACC,EAAOC,GAAR,OAAkB,sBAAiBV,UAAU,cAA3B,UAC1C,2CAAeU,EAAM,KACrB,+BAAOD,IACP,uBACEE,KAAK,QACL7B,MAAO2B,EACPG,SAAU,SAACC,GAAD,OAVM,SAACC,EAAIL,GACvBJ,GAAU,SAAAU,GAAU,OAAEA,EAAWP,KAAI,SAAC5B,EAAS8B,GAAV,OAAoBI,IAAKJ,EAAQD,EAAQ7B,QAS3DoC,CAAYN,EAAOG,EAAEI,OAAOnC,YANK4B,MAUtD,OACE,qCACE,6DACA,sBAAKV,UAAU,YAAf,UACE,cAAC,EAAD,CAAYZ,OAAQA,EAAQD,MAAOA,IACnC,sBAAKa,UAAU,SAAf,UACE,yCACCO,EACD,wBAAQ5B,QA9BC,WACf0B,GAAU,SAAAX,GAAI,4BAAMA,GAAN,CAAY,gBA6BpB,eACA,2CAAqB,uBAAOwB,KAAK,QAAQpC,MAAOK,EAAOwB,KAAK,SAASC,SA3BzD,SAACC,GACnBP,EAASO,EAAEI,OAAOnC,oBCTtBqC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.22cf9f07.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Input(props) {\r\n    return (\r\n        <>\r\n            <input \r\n                type=\"color\" \r\n                value={props.color} \r\n                onChange={(e) => props.changeColor(props.id, e.target.value)} \r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Input;","import React, {useRef} from 'react';\r\n\r\nfunction Code(props) {\r\n\r\n    const codeInput = useRef(null)\r\n\r\n    const highlightText = () => { \r\n        codeInput.current.select()\r\n    }\r\n\r\n    return (\r\n        <textarea \r\n            readOnly\r\n            ref={codeInput}\r\n            onClick={highlightText}\r\n            value={`background: ${props.code.background}; \\n-moz-background: ${props.code.background}; \\n-webkit: ${props.code.background}`}\r\n        />\r\n    );\r\n}\r\n\r\nexport default Code;\r\n","import React, {useState, useEffect} from 'react';\r\nimport Code from './Code';\r\n\r\nfunction PreviewBox(props) {\r\n\r\n    const [gradientStyle, setGradientStyle] = useState({\r\n        background: `linear-gradient(${props.angle}deg, ${props.colors[0]}, ${props.colors[1]})`,\r\n        MozBackground: `linear-gradient(${props.angle}deg, ${props.colors[0]}, ${props.colors[1]})`, \r\n        WebkitBackground: `linear-gradient(${props.angle}deg, ${props.colors[0]}, ${props.colors[1]})`\r\n    })\r\n\r\n    useEffect(()=> { \r\n        setGradientStyle(prev=>{ \r\n            let newStr = props.colors.slice(1).reduce((final,acc)=>{\r\n                return `${final}, ${acc}`\r\n            }, `${props.colors[0]} `)\r\n\r\n            return { \r\n                background: `linear-gradient(${props.angle}deg, ${newStr})`,\r\n                MozBackground: `linear-gradient(${props.angle}deg, ${newStr})`,\r\n                WebkitBackground: `linear-gradient(${props.angle}deg, ${newStr})`\r\n            }\r\n        })\r\n    }, [props.colors, props.angle])\r\n\r\n    return (\r\n        <div className=\"preview-box\">\r\n            <div style={{...gradientStyle,  width: \"500px\", height: \"200px\"}}>\r\n            </div>\r\n            <Code code={gradientStyle}/>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PreviewBox;\r\n\r\n// const styleSelector = \"background:\"\r\n// const browserPrefixes = [\"\", \"-moz-\", \"-webkit-\"] // browser prefixes for linear gradients\r\n\r\n// let codeSnippet = browserPrefixes.map(prefix => { \r\n//     return (`${prefix}${styleSelector} ${newColor};`)\r\n// })\r\n\r\n// newColor:`linear-gradient(${angle.value}deg, ${color1.value}, ${color2.value})`\r\n// growing string using reduce\r\n\r\n// `linear-gradient(${props.angle}deg, ${props.colors[0]}, ${props.colors[1]})`\r\n","import React, {useState} from 'react';\nimport Input from './Input';\nimport PreviewBox from './PreviewBox';\nimport \"./App.css\"\n\nfunction App(props) {\n  const [colors, setColors] = useState([\"#fbd2c8\", \"#df536c\"])\n  const [angle, setAngle] = useState(50)\n\n  const newColor = () => { \n    setColors(prev=>[...prev, \"#ffffff\"])\n  }\n\n  const changeAngle = (e) => { \n    setAngle(e.target.value)\n  }\n\n  const changeColor = (id, color) => { \n    setColors(prevColors=>prevColors.map((current, index) => id===index ? color : current))\n  }\n\n  const inputs = colors.map((color, index) => <div key={index} className=\"color-input\">\n    <label >Color {index+1}</label>\n    <span>{color}</span>\n    <input \n      type=\"color\" \n      value={color} \n      onChange={(e) => changeColor(index, e.target.value)} \n    />\n  </div>)\n\n  return (\n    <>\n      <h1>CSS Gradient Code Generator</h1>\n      <div className=\"container\">\n        <PreviewBox colors={colors} angle={angle}/>\n        <div className=\"inputs\">\n          <h2>Options</h2>\n          {inputs}\n          <button onClick={newColor}>+</button>\n          <label>Angle </label><input name=\"angle\" value={angle} type=\"number\" onChange={changeAngle}/>\n        </div>\n      </div>      \n    </>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n/*\n\nYou're going to create a code snippet generator. You might be familiar or have used some sort of \nweb dev tools that speed up your UI  development, such as color scheme pickers. For this assignment, \nyou're going to create a CSS gradient code snippet generator that lets you create a gradient with \nmultiple colors, and then generates a cross-browser compatible CSS code. \n\nThe generator must: \n1. Accept color inputs from the user (2+)\n2. Immediately displays a preview of the gradient \n3. Generates a cross browser CSS code snippet into a text box\n\nExtra credit: \n1. Create a \"randomize\" feature that randomly generates a gradient \n2. Create a \"copy to clipboard\" button that copies the code snippet\n3. Create a slider that lets you place how much space a color takes up\n4. Consider using a custom hook for each color input\n*/ "],"sourceRoot":""}